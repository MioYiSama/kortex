package net.mioyi.kortex.di

import java.lang.reflect.InvocationTargetException

object DependencyContainer {
    val dependencies: List<Dependency> = try {
        @Suppress("UNCHECKED_CAST")
        Class.forName("net.mioyi.kortex.di.generated.DependenciesKt")
            .getMethod("dependencies")
            .invoke(null) as List<Dependency>
    } catch (e: Throwable) {
        when (e) {
            is ClassNotFoundException -> {
                throw RuntimeException("Unable to find sources generated by KSP. Please ensure that KSP is configured correctly")
            }

            is NoSuchMethodException, is IllegalArgumentException -> {
                throw RuntimeException("Unable to create dependencies. Sources generated by KSP might be changed")
            }

            is InvocationTargetException -> {
                throw RuntimeException("An exception occurred while creating beans", e.targetException)
            }

            else -> {
                throw RuntimeException("Unexpected exception", e)
            }
        }
    }

    inline fun <reified T> get(qualifier: String = ""): T {
        val qualifiedDependencies = if (qualifier.isEmpty()) {
            dependencies
        } else {
            dependencies.filter { it.qualifier == qualifier }
        }

        val instances = qualifiedDependencies.mapNotNull {
            it.bean as? T
        }

        when (instances.size) {
            0 -> throw NoQualifiedDependencyException()
            1 -> return instances[0]
            else -> throw MultipleQualifiedDependencyException()
        }
    }
}